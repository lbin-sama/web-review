/**
 *
 * @author lbin
 * @data: 2024-04-07 10:45
 */

console.log(
  "数量的存储和传递================================================================================"
);

/**
 * 值和引用
 *
 * var a = 1
 * 原始类型直接在程序里开辟一个名为a的内存空间，里面 保存着 1
 *      == 原始类型赋值什么就放什么
 *
 * var b = {
 *      n1: 1,
 *      n2: 2
 * }
 *
 * 引用类型分两步
 *      首先是{ n1: 1, n2: 2 }，在程序里开辟一个内存空间，里面存有 属性，值 两个东西，排列下去
 *      随后将这个对象赋值给b，把第一步开辟的内存空间的地址存入b的内存空间
 *          注：若对象的某个属性还是一个对象，则也是存放地址，指向该对象的内存空间
 *
 * var a = 1
 * var b = a
 *      在程序里开辟一个名为a的内存空间，值为 1，在程序里开辟一个名为b的内存空间，将a的值赋值粘贴进去
 * b++
 *      b内存空间的值增加，与a无关
 *
 * var a = { n: 1 }
 * var b = a
 *      在程序里开辟一个名为a的内存空间，存放{ n: 1 }的地址，在程序里开辟一个名为b的内存空间，将a里的地址复制进去
 * b.n++
 *      b内存空间中的地址指向的内存空间中的n增加，a所用的地址也相同，故此a.n也进行变化
 *
 * b = { n: 3 }
 *      重新赋值，创建新的内存空间{ n: 3}并把地址替换，不影响a的地址
 */

// 下面代码输出什么？=========================================================================
// var foo = {
//   n: 0,
//   k: {
//     n: 0,
//   },
// };

// var bar = foo.k;

// bar.n++ // foo.k.n++ 1
// bar = { // 重新赋值，引用地址变化
//   n: 10,
// };

// bar = foo // 重新赋值，引用地址变化，与foo相同
// bar.n++; // foo.n++ 1
// bar = foo.n // 重新赋值，原始类型 1
// bar++ // bar自身值变化 2
// console.log(foo.n, foo.k.n) // 1 1

// 下面的代码输出什么（京东）？
// var foo = {
//   n: 1,
// };

// var arr = [foo] // 赋值，数组对象，引用地址

// function method1(arr) {
//   var bar = arr[0] // 赋值，引用地址
//   arr.push(bar) // 引用地址，增加对象，外部也变化
//   bar.n++ // 引用地址，则arr[0]++， arr[arr.length - 1]++ 2
//   arr = [bar] // 重新赋值，bar还是指向外部foo
//   arr.push(bar) // arr 值变化，增加对象 两个相同的
//   arr[1].n++ // 引用地址，则arr[0]++， arr[1]++ 3
// }
// function method2(foo) {
//   foo.n++ // 引用地址 foo.n = 4
// }
// function method3(n) {
//   n++ // 原始类型，不影响外部
// }
// method1(arr) // 对象中重新赋值过，但其中引用地址相同，则arr[0].n = 4 arr[1].n = 4
// method2(foo) // 同里，引用地址相同 foo.n = 4
// method3(foo.n) // 原始类型，不变 foo.n = 4

// console.log(foo.n, arr.length) // 4 2

// // 下面的代码输出什么（字节）？
// var foo = { bar: 1 } // 引用地址
// var arr1 = [1, 2, foo] // 引用地址, arr2[2] 引用地址
// var arr2 = arr1.slice(1) // 截取后两位，赋值给arr2，引用地址 arr2[1] 引用地址
// arr2[0]++ // 原始类型，arr2[0] 3 arr1[1] 不变
// arr2[1].bar++ // 引用类型foo.bar 2
// foo.bar++ // 引用类型foo.bar 3
// arr1[2].bar++ // 引用类型foo.bar 4
// console.log(arr1[1] === arr2[0]) // 原始类型，arr1没变 false
// console.log(arr1[2] === arr2[1]) // 引用类型，地址没变，true
// console.log(foo.bar) // 4
